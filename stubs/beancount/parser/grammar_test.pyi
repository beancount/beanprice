import unittest
from beancount.core import amount as amount, data as data
from beancount.core.amount import Amount as Amount
from beancount.core.number import D as D, MISSING as MISSING, ZERO as ZERO
from beancount.core.position import CostSpec as CostSpec
from beancount.parser import cmptest as cmptest, grammar as grammar, lexer as lexer, parser as parser
from beancount.utils import test_utils as test_utils
from typing import Any

def check_list(test: Any, objlist: Any, explist: Any) -> None: ...
def raise_exception(*args: Any, **kwargs: Any) -> None: ...

class TestParserEntryTypes(unittest.TestCase):
    def test_entry_transaction_one_string(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_transaction_two_strings(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_transaction_three_strings(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_entry_transaction_with_txn_keyword(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_balance(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_balance_with_cost(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_entry_open_1(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_open_2(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_open_3(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_entry_open_4(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_entry_open_5(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_entry_close(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_commodity(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_pad(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_event(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_query(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_note(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_document(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_price(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_entry_custom(self, entries: Any, _: Any, __: Any) -> None: ...

class TestWhitespace(unittest.TestCase):
    def test_indent_error_0(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_indent_error_1(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestParserComplete(unittest.TestCase):
    def test_entry_transaction_single_posting_at_zero(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_entry_transaction_imbalance_from_single_posting(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestUglyBugs(unittest.TestCase):
    def test_empty_1(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_empty_2(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_comment(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_extra_whitespace_note(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_extra_whitespace_transaction(self) -> None: ...
    def test_extra_whitespace_comment(self) -> None: ...
    def test_indent_eof(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_comment_eof(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_no_empty_lines(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestComment(unittest.TestCase):
    def test_comment_before_transaction(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_comment_after_transaction(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_comment_between_postings(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_comment_after_posting(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_comment_after_transaction_start(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestPushPopTag(unittest.TestCase):
    def test_tag_left_unclosed(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_pop_invalid_tag(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestPushPopMeta(unittest.TestCase):
    def test_pushmeta_normal(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_pushmeta_shadow(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_pushmeta_override(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_pushmeta_invalid_pop(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_pushmeta_forgotten(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestMultipleLines(unittest.TestCase):
    def test_multiline_narration(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestSyntaxErrors(unittest.TestCase):
    def test_lexer_default_rule_1(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_lexer_default_rule_2(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_no_final_newline(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestParserOptions(unittest.TestCase):
    def test_option_single_value(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_option_list_value(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_invalid_option(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_readonly_option(self, entries: Any, errors: Any, options_map: Any) -> None: ...

class TestParserInclude(unittest.TestCase):
    def test_parse_nonexist(self) -> None: ...
    def test_include_absolute(self, filename: Any) -> None: ...
    def test_include_relative(self, filename: Any) -> None: ...
    def test_include_relative_from_string(self) -> None: ...

class TestParserPlugin(unittest.TestCase):
    def test_plugin(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_plugin_with_config(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_plugin_as_option(self, entries: Any, errors: Any, options_map: Any) -> None: ...

class TestDisplayContextOptions(unittest.TestCase):
    def test_render_commas_no(self, _: Any, __: Any, options_map: Any) -> None: ...
    def test_render_commas_yes(self, _: Any, __: Any, options_map: Any) -> None: ...
    def test_render_commas_yes2(self, _: Any, __: Any, options_map: Any) -> None: ...

class TestMiscOptions(unittest.TestCase):
    def test_plugin_processing_mode__default(self, _: Any, __: Any, options_map: Any) -> None: ...
    def test_plugin_processing_mode__raw(self, _: Any, __: Any, options_map: Any) -> None: ...
    def test_plugin_processing_mode__invalid(self, _: Any, errors: Any, options_map: Any) -> None: ...

class TestToleranceOptions(unittest.TestCase):
    def test_tolerance_defaults(self, _: Any, __: Any, options_map: Any) -> None: ...
    def test_inferred_tolerance_default(self, _: Any, __: Any, options_map: Any) -> None: ...

class TestDeprecatedOptions(unittest.TestCase):
    def test_deprecated_plugin(self, _: Any, errors: Any, __: Any) -> None: ...
    def test_deprecated_option(self, _: Any, errors: Any, options_map: Any) -> None: ...

class TestParserLinks(unittest.TestCase):
    def test_links(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestTransactions(unittest.TestCase):
    def test_simple_1(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_simple_2(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_empty_narration(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_no_narration(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_payee_no_narration(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_too_many_strings(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_link_and_then_tag(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_tag_then_link(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_zero_prices(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_zero_units(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_zero_costs(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_imbalance(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_no_postings(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_blank_line_not_allowed(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_blank_line_with_spaces_not_allowed(self) -> None: ...
    def test_tags_after_first_line(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_tags_after_first_posting(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestParseLots(unittest.TestCase):
    maxDiff: Any = ...
    def test_cost_none(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_empty(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_amount(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_date(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_label(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_merge(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_two_components(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_three_components(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_repeated(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_repeated_date(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_repeated_label(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_repeated_merge(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_both_costs(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_total_cost_only(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_total_empty_total(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_total_just_currency(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_with_slashes(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestCurrencies(unittest.TestCase):
    def test_parse_currencies(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_different_cost_and_price_currency(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestTotalsAndSigns(unittest.TestCase):
    def test_zero_amount(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_zero_cost(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_cost_negative(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_total_cost(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_total_cost__invalid(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_total_cost_negative(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_price_negative(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_total_price_positive(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_total_price_negative(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_total_price_inverted(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_total_price_with_missing(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestBalance(unittest.TestCase):
    def test_total_price(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_total_cost(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestMetaData(unittest.TestCase):
    @staticmethod
    def strip_meta(meta: Any): ...
    def test_metadata_transaction__begin(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_metadata_transaction__middle(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_metadata_transaction__end(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_metadata_transaction__many(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_metadata_transaction__indented(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_metadata_transaction__repeated(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_metadata_empty(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_metadata_other(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_metadata_data_types(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_metadata_key_syntax(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestArithmetic(unittest.TestCase):
    maxDiff: Any = ...
    def test_number_expr__add(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_number_expr__subtract(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_number_expr__multiply(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_number_expr__divide(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_number_expr__negative(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_number_expr__positive(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_number_expr__precedence(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_number_expr__groups(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_number_expr__different_places(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestLexerAndParserErrors(cmptest.TestCase):
    def test_lexer_invalid_token(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_lexer_invalid_token__recovery(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_lexer_exception(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_lexer_exception__recovery(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_lexer_errors_in_postings(self) -> None: ...
    def test_grammar_syntax_error(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_syntax_error__recovery(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_syntax_error__recovery2(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_syntax_error__multiple(self, entries: Any, errors: Any, _: Any) -> None: ...
    def check_entries_errors(self, entries: Any, errors: Any) -> None: ...
    def test_grammar_exceptions__pushtag(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__poptag(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__option(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__include(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__plugin(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__amount(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__compound_amount(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__lot_cost_date(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__open(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__close(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__commodity(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__pad(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__balance(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__event(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__price(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__note(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__document(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__key_value(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__posting(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__tag_link_new(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__tag_link_TAG(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__tag_link_LINK(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__tag_link_PIPE(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_grammar_exceptions__transaction(self, entries: Any, errors: Any, _: Any) -> None: ...

class TestIncompleteInputs(cmptest.TestCase):
    def test_units_full(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_units_missing(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_units_missing_number(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_units_missing_currency(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_units_missing_with_cost(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_units_missing_number_with_cost(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_units_missing_currency_with_cost(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_units_missing_with_price(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_units_missing_number_with_price(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_units_missing_currency_with_price(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_price_none(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_price_missing(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_price_missing_number(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_price_missing_currency(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_cost_full(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_cost_missing_number_per(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_cost_missing_number_total(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_cost_no_number_total(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_cost_missing_numbers(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_cost_missing_currency(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_cost_empty(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_cost_empty_with_other(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_cost_missing_basis(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_cost_average(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_cost_average_missing_basis(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_cost_average_with_other(self, entries: Any, _: Any, options_map: Any) -> None: ...

class TestMisc(cmptest.TestCase):
    def test_comment_in_postings(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_comment_in_postings_invalid(self, entries: Any, errors: Any, options_map: Any) -> None: ...

class TestDocument(unittest.TestCase):
    def test_document_no_tags_links(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_document_tags(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_document_links(self, entries: Any, _: Any, __: Any) -> None: ...

class TestMethodsSignature(unittest.TestCase):
    def test_signatures(self) -> None: ...
