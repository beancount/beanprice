import unittest
from beancount import loader as loader
from beancount.core import data as data, interpolate as interpolate
from beancount.parser import cmptest as cmptest, printer as printer
from beancount.utils import test_utils as test_utils
from typing import Any

META: Any

class TestPrinter(unittest.TestCase):
    def test_methods_coverage(self) -> None: ...
    def test_render_source(self) -> None: ...
    def test_format_and_print_error(self) -> None: ...

class TestEntryPrinter(cmptest.TestCase):
    def assertRoundTrip(self, entries1: Any, errors1: Any) -> None: ...
    def test_Transaction(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_Balance(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_BalanceTolerance(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_Note(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_Document(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_Query(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_Pad(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_Open(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_Close(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_Price(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_Event(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_metadata(self) -> None: ...

def characterize_spaces(text: Any): ...

class TestPrinterSpacing(unittest.TestCase):
    maxDiff: int = ...
    def test_interline_spacing(self) -> None: ...

class TestDisplayContext(test_utils.TestCase):
    maxDiff: int = ...
    def test_precision(self, entries: Any, errors: Any, options_map: Any) -> None: ...

class TestPrinterAlignment(test_utils.TestCase):
    maxDiff: Any = ...
    def test_align_position_strings(self) -> None: ...
    def test_align(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_align_min_width_account(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_align_with_weight(self, entries: Any, errors: Any, options_map: Any) -> None: ...

class TestPrinterMisc(test_utils.TestCase):
    def test_no_valid_account(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_metadata(self) -> None: ...
    def test_zero_cost(self) -> None: ...
    def test_very_small_number(self) -> None: ...
    def test_render_missing(self) -> None: ...
    def test_render_meta_with_None(self) -> None: ...
