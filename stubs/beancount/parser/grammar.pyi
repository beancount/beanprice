from beancount.core import account as account, data as data, display_context as display_context
from beancount.core.amount import Amount as Amount
from beancount.core.data import Balance as Balance, Booking as Booking, Close as Close, Commodity as Commodity, Custom as Custom, Document as Document, EMPTY_SET as EMPTY_SET, Event as Event, Note as Note, Open as Open, Pad as Pad, Posting as Posting, Price as Price, Query as Query, Transaction as Transaction, new_metadata as new_metadata
from beancount.core.number import MISSING as MISSING, ZERO as ZERO
from beancount.core.position import CostSpec as CostSpec
from beancount.parser import lexer as lexer, options as options
from collections import namedtuple
from typing import Any, Optional

ParserError = namedtuple('ParserError', 'source message entry')

ParserSyntaxError = namedtuple('ParserSyntaxError', 'source message entry')

DeprecatedError = namedtuple('DeprecatedError', 'source message entry')

KeyValue = namedtuple('KeyValue', 'key value')

ValueType = namedtuple('ValueType', 'value dtype')

CompoundAmount = namedtuple('CompoundAmount', 'number_per number_total currency')
MERGE_COST: str

def valid_account_regexp(options: Any): ...

TagsLinks = namedtuple('TagsLinks', 'tags links')

class Builder(lexer.LexBuilder):
    tags: Any = ...
    meta: Any = ...
    entries: Any = ...
    options: Any = ...
    accounts: Any = ...
    account_regexp: Any = ...
    dcontext: Any = ...
    display_context_update: Any = ...
    def __init__(self) -> None: ...
    def finalize(self): ...
    def get_entries(self): ...
    def get_options(self): ...
    def get_long_string_maxlines(self): ...
    def store_result(self, filename: Any, lineno: Any, entries: Any) -> None: ...
    def build_grammar_error(self, filename: Any, lineno: Any, exc_value: Any, exc_type: Optional[Any] = ..., exc_traceback: Optional[Any] = ...) -> None: ...
    def account(self, filename: Any, lineno: Any, account: Any): ...
    def pipe_deprecated_error(self, filename: Any, lineno: Any) -> None: ...
    def pushtag(self, filename: Any, lineno: Any, tag: Any) -> None: ...
    def poptag(self, filename: Any, lineno: Any, tag: Any) -> None: ...
    def pushmeta(self, filename: Any, lineno: Any, key_value: Any) -> None: ...
    def popmeta(self, filename: Any, lineno: Any, key: Any) -> None: ...
    def option(self, filename: Any, lineno: Any, key: Any, value: Any) -> None: ...
    def include(self, filename: Any, lineno: Any, include_filename: Any) -> None: ...
    def plugin(self, filename: Any, lineno: Any, plugin_name: Any, plugin_config: Any) -> None: ...
    def amount(self, filename: Any, lineno: Any, number: Any, currency: Any): ...
    def compound_amount(self, filename: Any, lineno: Any, number_per: Any, number_total: Any, currency: Any): ...
    def cost_merge(self, filename: Any, lineno: Any, _: Any): ...
    def cost_spec(self, filename: Any, lineno: Any, cost_comp_list: Any, is_total: Any): ...
    def handle_list(self, filename: Any, lineno: Any, object_list: Any, new_object: Any): ...
    def open(self, filename: Any, lineno: Any, date: Any, account: Any, currencies: Any, booking_str: Any, kvlist: Any): ...
    def close(self, filename: Any, lineno: Any, date: Any, account: Any, kvlist: Any): ...
    def commodity(self, filename: Any, lineno: Any, date: Any, currency: Any, kvlist: Any): ...
    def pad(self, filename: Any, lineno: Any, date: Any, account: Any, source_account: Any, kvlist: Any): ...
    def balance(self, filename: Any, lineno: Any, date: Any, account: Any, amount: Any, tolerance: Any, kvlist: Any): ...
    def event(self, filename: Any, lineno: Any, date: Any, event_type: Any, description: Any, kvlist: Any): ...
    def query(self, filename: Any, lineno: Any, date: Any, query_name: Any, query_string: Any, kvlist: Any): ...
    def price(self, filename: Any, lineno: Any, date: Any, currency: Any, amount: Any, kvlist: Any): ...
    def note(self, filename: Any, lineno: Any, date: Any, account: Any, comment: Any, kvlist: Any): ...
    def document(self, filename: Any, lineno: Any, date: Any, account: Any, document_filename: Any, tags_links: Any, kvlist: Any): ...
    def custom(self, filename: Any, lineno: Any, date: Any, dir_type: Any, custom_values: Any, kvlist: Any): ...
    def custom_value(self, filename: Any, lineno: Any, value: Any, dtype: Optional[Any] = ...): ...
    def key_value(self, filename: Any, lineno: Any, key: Any, value: Any): ...
    def posting(self, filename: Any, lineno: Any, account: Any, units: Any, cost: Any, price: Any, istotal: Any, flag: Any): ...
    def tag_link_new(self, filename: Any, lineno: Any): ...
    def tag_link_TAG(self, filename: Any, lineno: Any, tags_links: Any, tag: Any): ...
    def tag_link_LINK(self, filename: Any, lineno: Any, tags_links: Any, link: Any): ...
    def transaction(self, filename: Any, lineno: Any, date: Any, flag: Any, txn_strings: Any, tags_links: Any, posting_or_kv_list: Any): ...
