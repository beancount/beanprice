import unittest
from beancount import loader as loader
from beancount.core import amount as amount, data as data, interpolate as interpolate, inventory as inventory, position as position
from beancount.core.amount import A as A
from beancount.core.data import Booking as Booking
from beancount.core.number import D as D, MISSING as MISSING
from beancount.core.position import Cost as Cost, CostSpec as CostSpec, Position as Position
from beancount.parser import booking as booking, cmptest as cmptest, options as options, parser as parser, printer as printer
from beancount.utils import test_utils as test_utils
from typing import Any, Optional

class TestAllInterpolationCombinations(cmptest.TestCase):
    def test_all_currency_interpolations(self) -> None: ...
    def test_all_interpolation_combinations(self) -> None: ...

def indexes(groups: Any): ...

class TestCategorizeCurrencyGroup(unittest.TestCase):
    def test_categorize__units__unambiguous(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_categorize__units__ambiguous(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_categorize__units_price__unambiguous(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_categorize__units_price__ambiguous(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_categorize__units_cost__unambiguous(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_categorize__units_cost__ambiguous(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_categorize__units_cost_price__unambiguous(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_categorize__units_cost_price__ambiguous(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_categorize__multiple_auto_postings(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_categorize__redundant_auto_postings(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_categorize__two_unknown_postings(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_categorize__against_mixed(self, entries: Any, _: Any, options_map: Any) -> None: ...

class TestReplaceCurrenciesInGroup(unittest.TestCase):
    def check(self, expected: Any, entry: Any) -> None: ...
    def test_auto_posting(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_missing(self, entries: Any, _: Any, options_map: Any) -> None: ...

def normalize_postings(postings: Any): ...

class TestInterpolateCurrencyGroup(unittest.TestCase):
    maxDiff: int = ...
    def check(self, entry: Any, expected: Any, balances: Optional[Any] = ..., debug: bool = ..., options_map: Optional[Any] = ...): ...
    def test_complete(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_incomplete_impossible_twomiss_diff_units(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_incomplete_impossible_twomiss_diff_cost_and_units(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_incomplete_impossible_miss_same_posting(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_incomplete_units(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_incomplete_cost_both(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_incomplete_cost_per(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_incomplete_cost_total(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_incomplete_price(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_multiple_groups(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_incomplete_underdefined(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_incomplete_underdefined2(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_auto_posting__superfluous_unused(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_auto_posting__superfluous_unneeded(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_auto_posting__superfluous_needed_one_side(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_auto_posting__quantize_with_tolerances(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_negative_units(self, entries: Any, errors: Any, options_map: Any) -> None: ...

class TestComputeCostNumber(unittest.TestCase):
    date: Any = ...
    def test_missing_per(self) -> None: ...
    def test_missing_total(self) -> None: ...
    def test_both_none(self) -> None: ...
    def test_total_only(self) -> None: ...
    def test_per_only(self) -> None: ...
    def test_both(self) -> None: ...
    def test_no_currency(self) -> None: ...
    def test_negative_numbers(self) -> None: ...

class TestParseBookingOptions(cmptest.TestCase):
    def test_booking_method__strict(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_booking_method__average(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_booking_method__invalid(self, _: Any, errors: Any, options_map: Any) -> None: ...

def find_first_with_tag(tag: Any, entries: Any, default: Any = ...): ...
def book_test(method: Any): ...

class _BookingTestBase(unittest.TestCase):
    maxDiff: int = ...
    VALID_TAGS: Any = ...
    def assertErrors(self, entry: Any, errors: Any) -> None: ...
    def assertPostings(self, expected_postings: Any, actual_postings: Any) -> None: ...

class TestBookAugmentations(_BookingTestBase):
    def test_augment__from_empty__no_cost__pos(self, _: Any, __: Any) -> None: ...
    def test_augment__from_empty__no_cost__neg(self, _: Any, __: Any) -> None: ...
    def test_augment__from_empty__at_cost__pos(self, _: Any, __: Any) -> None: ...
    def test_augment__from_empty__at_cost__neg(self, _: Any, __: Any) -> None: ...
    def test_augment__from_empty__incomplete_cost__empty(self, entries: Any, __: Any) -> None: ...
    def test_augment__from_empty__incomplete_cost__with_currency(self, entries: Any, __: Any) -> None: ...

class TestBookReductions(_BookingTestBase):
    def test_reduce__no_cost(self, _: Any, __: Any) -> None: ...
    def test_reduce__sign_change_simple(self, _: Any, __: Any) -> None: ...
    def test_reduce__no_match(self, _: Any, __: Any) -> None: ...
    def test_reduce__unambiguous(self, _: Any, __: Any) -> None: ...
    def test_reduce__ambiguous__strict(self, _: Any, __: Any) -> None: ...
    def test_reduce__ambiguous__none(self, _: Any, __: Any) -> None: ...
    def test_reduce__ambiguous__none__from_mixed(self, _: Any, __: Any) -> None: ...
    def test_reduce__other_currency(self, _: Any, __: Any) -> None: ...
    def test_reduce__multiple_reductions(self, _: Any, __: Any) -> None: ...
    def test_reduce__multiple_reductions__competing__with_error(self, _: Any, __: Any) -> None: ...
    def test_reduce__multiple_reductions__overflowing__with_error(self, _: Any, __: Any) -> None: ...
    def test_reduce__multiple_reductions__no_error_because_total(self, _: Any, __: Any) -> None: ...
    def test_reduce__reduction_with_same_currency_not_at_cost(self, _: Any, __: Any) -> None: ...
    def test_reduce__missing_units_number(self, _: Any, __: Any) -> None: ...

class TestHasSelfReductions(cmptest.TestCase):
    BM: Any = ...
    def test_has_self_reductions__simple(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_has_self_reductions__inverted_signs(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_has_self_reductions__multiple(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_has_self_reductions__reducing_without_cost(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_has_self_reductions__augmenting_without_cost(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_has_self_reductions__different_currency(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_has_self_reductions__different_account(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_has_self_reductions__total_replacement(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_has_self_reductions__booking_method_allowed(self, entries: Any, _: Any, __: Any) -> None: ...

class TestBookReductionsSelf(_BookingTestBase):
    def test_reduce__augment_and_reduce_with_empty_balance(self, _: Any, errors: Any) -> None: ...
    def test_reduce__augment_and_reduce_with_empty_balance__matching_pos(self, _: Any, __: Any) -> None: ...
    def test_reduce__augment_and_reduce_with_empty_balance__matching_neg(self, _: Any, __: Any) -> None: ...
    def test_reduce__augment_and_reduce_with_non_empty_balance(self, _: Any, __: Any) -> None: ...

class TestBookAmbiguous(_BookingTestBase):
    def test_ambiguous__NONE__matching_existing1(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__NONE__matching_existing2(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__NONE__notmatching_nonmixed1(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__NONE__notmatching_nonmixed2(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__NONE__notmatching_mixed1(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__NONE__notmatching_mixed2(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__STRICT_1(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__STRICT_2(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__STRICT__mixed(self, _: Any, __: Any) -> None: ...

class TestBookAmbiguousFIFO(_BookingTestBase):
    def test_ambiguous__FIFO__no_match_against_any_lots(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__FIFO__test_match_against_partial_first_lot(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__FIFO__test_match_against_complete_first_lot(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__FIFO__test_partial_match_against_first_two_lots(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__FIFO__test_complete_match_against_first_two_lots(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__FIFO__test_partial_match_against_first_three_lots(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__FIFO__test_complete_match_against_first_three_lots(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__FIFO__test_matching_more_than_is_available(self, _: Any, __: Any) -> None: ...

class TestBookAmbiguousLIFO(_BookingTestBase):
    def test_ambiguous__LIFO__no_match_against_any_lots(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__LIFO__test_match_against_partial_first_lot(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__LIFO__test_match_against_complete_first_lot(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__LIFO__test_partial_match_against_first_two_lots(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__LIFO__test_complete_match_against_first_two_lots(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__LIFO__test_partial_match_against_first_three_lots(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__LIFO__test_complete_match_against_first_three_lots(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__LIFO__test_matching_more_than_is_available(self, _: Any, __: Any) -> None: ...

class _TestBookAmbiguousAVERAGE(_BookingTestBase):
    def test_ambiguous__AVERAGE__trivial1(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__trivial2(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__simple_merge2_match1(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__simple_merge2_match2(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__simple_merge2_match2_b(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__simple_merge3_match1(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__simple_merge2_insufficient(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__simple_merge2_insufficient_b(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__mixed_currencies__ambi(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__mixed_currencies__unambi_currency(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__mixed_currencies__unambi_currency__merging(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__mixed_currencies__unambi_cost_ccy__merging(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__mixed_currencies__unambi_cost__merging(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__mixed_currencies__unambi_date(self, _: Any, __: Any) -> None: ...
    def test_ambiguous__AVERAGE__mixed_currencies__unambi_with_merge(self, _: Any, __: Any) -> None: ...

class TestBasicBooking(_BookingTestBase):
    def test_augment__at_cost__same_date(self, _: Any, __: Any) -> None: ...
    def test_augment__at_cost__different_date(self, _: Any, __: Any) -> None: ...
    def test_augment__at_cost__different_cost(self, _: Any, __: Any) -> None: ...

class TestBookingApi(unittest.TestCase):
    def test_book_single(self): ...

class TestBook(unittest.TestCase):
    def book_reductions(self, entries: Any, currency: str = ...): ...
    def assertPostingsEqual(self, postings1: Any, postings2: Any) -> None: ...
    def test_augment__at_cost__different_cost(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_augment__at_cost__different_currency(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_augment__at_cost__different_label(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_reduce__no_cost(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_reduce__same_cost(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_reduce__any_spec(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_reduce__same_cost__per(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_reduce__same_cost__total(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_reduce__same_currency(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_reduce__same_date(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_reduce__same_label(self, entries: Any, _: Any, __: Any) -> None: ...
