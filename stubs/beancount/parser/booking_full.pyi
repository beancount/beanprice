import enum
from beancount.core import interpolate as interpolate, inventory as inventory, position as position
from beancount.core.amount import Amount as Amount
from beancount.core.data import Booking as Booking, Transaction as Transaction
from beancount.core.number import MISSING as MISSING, ZERO as ZERO
from beancount.core.position import Cost as Cost, CostSpec as CostSpec, Position as Position
from beancount.parser import booking_method as booking_method
from collections import namedtuple
from typing import Any, Text

def unique_label() -> Text: ...

SelfReduxError = namedtuple('SelfReduxError', 'source message entry')

def book(entries: Any, options_map: Any, methods: Any): ...

CategorizationError = namedtuple('CategorizationError', 'source message entry')

def get_bucket_currency(refer: Any): ...

Refer = namedtuple('Refer', 'index units_currency cost_currency price_currency')

def categorize_by_currency(entry: Any, balances: Any): ...
def replace_currencies(postings: Any, refer_groups: Any): ...

ReductionError = namedtuple('ReductionError', 'source message entry')

def has_self_reduction(postings: Any, methods: Any): ...
def book_reductions(entry: Any, group_postings: Any, balances: Any, methods: Any): ...
def compute_cost_number(costspec: Any, units: Any): ...
def convert_costspec_to_cost(posting: Any): ...

class MissingType(enum.Enum):
    UNITS: int = ...
    COST_PER: int = ...
    COST_TOTAL: int = ...
    PRICE: int = ...

InterpolationError = namedtuple('InterpolationError', 'source message entry')

def interpolate_group(postings: Any, balances: Any, currency: Any, tolerances: Any): ...
