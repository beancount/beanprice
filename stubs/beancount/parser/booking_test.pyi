from beancount.core.data import Booking as Booking
from beancount.parser import booking as booking, cmptest as cmptest, parser as parser
from collections import namedtuple
from typing import Any

BookingTestError = namedtuple('BookingTestError', 'source message entry')

class TestInvalidAmountsErrors(cmptest.TestCase):
    def test_zero_amount(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_zero_amount__with_cost(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_cost_zero(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_cost_negative(self, entries: Any, errors: Any, options_map: Any) -> None: ...

class TestBookingValidation(cmptest.TestCase):
    input_str: Any = ...
    def setUp(self) -> None: ...
    BOOKMETH: Any = ...
    def convert_and_validate(self, entries: Any, options_map: Any): ...
    def do_validate_inventory_booking(self, input_str: Any) -> None: ...
    def test_validate_inventory_booking(self) -> None: ...
    def test_validate_inventory_booking__same_day(self) -> None: ...
    def test_simple_negative_lots(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_mixed_lots_in_single_transaction(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_mixed_lots_in_multiple_transactions_augmenting(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_mixed_lots_in_multiple_transactions_reducing(self, entries: Any, errors: Any, options_map: Any) -> None: ...
