from beancount.core import account as account, amount as amount, convert as convert, data as data, display_context as display_context, interpolate as interpolate, inventory as inventory, position as position
from beancount.utils import misc_utils as misc_utils
from typing import Any, Optional

def align_position_strings(strings: Any): ...

class EntryPrinter:
    dcontext: Any = ...
    dformat: Any = ...
    dformat_max: Any = ...
    render_weight: Any = ...
    min_width_account: Any = ...
    prefix: Any = ...
    stringify_invalid_types: Any = ...
    def __init__(self, dcontext: Optional[Any] = ..., render_weight: bool = ..., min_width_account: Optional[Any] = ..., prefix: Optional[Any] = ..., stringify_invalid_types: bool = ...) -> None: ...
    def __call__(self, obj: Any): ...
    META_IGNORE: Any = ...
    def write_metadata(self, meta: Any, oss: Any, prefix: Optional[Any] = ...) -> None: ...
    def Transaction(self, entry: Any, oss: Any) -> None: ...
    def render_posting_strings(self, posting: Any): ...
    def Posting(self, posting: Any, oss: Any) -> None: ...
    def Balance(self, entry: Any, oss: Any) -> None: ...
    def Note(self, entry: Any, oss: Any) -> None: ...
    def Document(self, entry: Any, oss: Any) -> None: ...
    def Pad(self, entry: Any, oss: Any) -> None: ...
    def Open(self, entry: Any, oss: Any) -> None: ...
    def Close(self, entry: Any, oss: Any) -> None: ...
    def Commodity(self, entry: Any, oss: Any) -> None: ...
    def Price(self, entry: Any, oss: Any) -> None: ...
    def Event(self, entry: Any, oss: Any) -> None: ...
    def Query(self, entry: Any, oss: Any) -> None: ...
    def Custom(self, entry: Any, oss: Any) -> None: ...

def format_entry(entry: Any, dcontext: Optional[Any] = ..., render_weights: bool = ..., prefix: Optional[Any] = ...): ...
def print_entry(entry: Any, dcontext: Optional[Any] = ..., render_weights: bool = ..., file: Optional[Any] = ...) -> None: ...
def print_entries(entries: Any, dcontext: Optional[Any] = ..., render_weights: bool = ..., file: Optional[Any] = ..., prefix: Optional[Any] = ...) -> None: ...
def render_source(meta: Any): ...
def format_error(error: Any): ...
def print_error(error: Any, file: Optional[Any] = ...) -> None: ...
def print_errors(errors: Any, file: Optional[Any] = ..., prefix: Optional[Any] = ...) -> None: ...
