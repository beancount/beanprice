import enum
from beancount.core import amount as amount, data as data
from beancount.core.number import D as D
from beancount.ingest import importer as importer
from typing import Any, Optional

class BalanceType(enum.Enum):
    NONE: int = ...
    DECLARED: int = ...
    LAST: int = ...

class Importer(importer.ImporterProtocol):
    acctid_regexp: Any = ...
    account: Any = ...
    basename: Any = ...
    balance_type: Any = ...
    def __init__(self, acctid_regexp: Any, account: Any, basename: Optional[Any] = ..., balance_type: Any = ...) -> None: ...
    def name(self): ...
    def identify(self, file: Any): ...
    def file_account(self, _: Any): ...
    def file_name(self, file: Any): ...
    def file_date(self, file: Any): ...
    def extract(self, file: Any, existing_entries: Optional[Any] = ...): ...

def extract(soup: Any, filename: Any, acctid_regexp: Any, account: Any, flag: Any, balance_type: Any): ...
def parse_ofx_time(date_str: Any): ...
def find_acctids(contents: Any) -> None: ...
def find_max_date(contents: Any): ...
def find_currency(soup: Any): ...
def find_statement_transactions(soup: Any) -> None: ...
def find_child(node: Any, name: Any, conversion: Optional[Any] = ...): ...
def build_transaction(stmttrn: Any, flag: Any, account: Any, currency: Any): ...
