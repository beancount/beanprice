import csv
import enum
from beancount.core import data as data
from beancount.core.amount import Amount as Amount
from beancount.core.number import D as D, ZERO as ZERO
from beancount.ingest.importers.mixins import filing as filing, identifier as identifier
from beancount.utils import test_utils as test_utils
from beancount.utils.date_utils import parse_date_liberally as parse_date_liberally
from typing import Any, Callable, Dict, Optional, Union

class Col(enum.Enum):
    DATE: str = ...
    TXN_DATE: str = ...
    TXN_TIME: str = ...
    PAYEE: str = ...
    NARRATION: str = ...
    NARRATION1: str = ...
    NARRATION2: str = ...
    NARRATION3: str = ...
    AMOUNT: str = ...
    AMOUNT_DEBIT: str = ...
    AMOUNT_CREDIT: str = ...
    BALANCE: str = ...
    TAG: str = ...
    REFERENCE_ID: str = ...
    DRCR: str = ...
    LAST4: str = ...
    ACCOUNT: str = ...
    CATEGORY: str = ...

def get_amounts(iconfig: Any, row: Any, allow_zero_amounts: Any, parse_amount: Any): ...

class Importer(identifier.IdentifyMixin, filing.FilingMixin):
    config: Any = ...
    currency: Any = ...
    skip_lines: Any = ...
    last4_map: Any = ...
    debug: Any = ...
    dateutil_kwds: Any = ...
    csv_dialect: Any = ...
    narration_sep: Any = ...
    encoding: Any = ...
    invert_sign: Any = ...
    categorizer: Any = ...
    def __init__(self, config: Any, account: Any, currency: Any, regexps: Any=..., skip_lines: int=..., last4_map: Optional[Dict]=..., categorizer: Optional[Callable]=..., institution: Optional[str]=..., debug: bool=..., csv_dialect: Union[str, csv.Dialect]=..., dateutil_kwds: Optional[Dict]=..., narration_sep: str=..., encoding: Optional[str]=..., invert_sign: Optional[bool]=..., **kwds: Any) -> None: ...
    def file_date(self, file: Any): ...
    def extract(self, file: Any, existing_entries: Optional[Any] = ...): ...
    def call_categorizer(self, txn: Any, row: Any): ...
    def parse_amount(self, string: Any): ...
    def get_amounts(self, iconfig: Any, row: Any, allow_zero_amounts: Any, parse_amount: Any): ...

def normalize_config(config: Any, head: Any, dialect: Any=..., skip_lines: int=...) -> Any: ...
