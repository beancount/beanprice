import unittest
from beancount import loader as loader
from beancount.ingest import extract as extract, importer as importer, scripts_utils as scripts_utils
from beancount.parser import parser as parser
from beancount.utils import misc_utils as misc_utils, test_utils as test_utils
from typing import Any, Optional

extract_main: Any

class TestScriptExtractFromFile(test_utils.TestCase):
    def test_extract_from_file__empty(self) -> None: ...
    def test_extract_from_file__ensure_sorted(self): ...
    def test_extract_from_file__ensure_sanity(self) -> None: ...
    def test_extract_from_file__min_date(self) -> None: ...
    def test_extract_from_file__existing_entries(self) -> None: ...
    def test_extract_from_file__explicitly_marked_duplicates_entries(self) -> None: ...
    def test_extract_from_file__raises_exception(self) -> None: ...

class TestPrintExtractedEntries(scripts_utils.TestScriptsBase, unittest.TestCase):
    class ExtractTestImporter(importer.ImporterProtocol):
        def file_account(self, _: Any): ...
    def test_print_extracted_entries(self, mock_extract_from_file: Any) -> None: ...

class _LoaderImporter(importer.ImporterProtocol):
    filename: Any = ...
    account: Any = ...
    def __init__(self, filename: Any, account: Any) -> None: ...
    def identify(self, file: Any): ...
    def extract(self, file: Any, existing_entries: Optional[Any] = ...): ...
    def file_account(self, _: Any): ...

class TestScriptExtract(test_utils.TestTempdirMixin, unittest.TestCase):
    config_filename: Any = ...
    downloads: Any = ...
    dl_checking: Any = ...
    dl_credit: Any = ...
    def setUp(self) -> None: ...
    def test_extract(self) -> None: ...
    def test_extract_find_dups_once_only_with_many_files(self, mock: Any) -> None: ...
    def test_extract_with_previous_entries(self) -> None: ...
    def test_extract_no_files(self) -> None: ...
    def test_extract_examples(self) -> None: ...
