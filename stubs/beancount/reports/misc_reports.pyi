from beancount.core import account_types as account_types, data as data, display_context as display_context, getters as getters, realization as realization
from beancount.parser import options as options, printer as printer
from beancount.reports import base as base, tree_table as tree_table
from beancount.utils import date_utils as date_utils, misc_utils as misc_utils, table as table
from typing import Any

class NoopReport(base.Report):
    names: Any = ...
    default_format: str = ...
    def render_text(self, entries: Any, errors: Any, options_map: Any, file: Any) -> None: ...

class ErrorReport(base.HTMLReport):
    names: Any = ...
    default_format: str = ...
    def render_text(self, entries: Any, errors: Any, options_map: Any, file: Any) -> None: ...
    def render_htmldiv(self, entries: Any, errors: Any, options_map: Any, file: Any) -> None: ...

class PrintReport(base.Report):
    names: Any = ...
    default_format: str = ...
    def render_beancount(self, entries: Any, errors: Any, options_map: Any, file: Any) -> None: ...

class AccountsReport(base.Report):
    names: Any = ...
    default_format: str = ...
    def render_beancount(self, entries: Any, errors: Any, options_map: Any, file: Any): ...

class CurrentEventsReport(base.TableReport):
    names: Any = ...
    def generate_table(self, entries: Any, errors: Any, options_map: Any): ...

class EventsReport(base.TableReport):
    names: Any = ...
    @classmethod
    def add_args(cls, parser: Any) -> None: ...
    def generate_table(self, entries: Any, errors: Any, options_map: Any): ...

class ActivityReport(base.HTMLReport, metaclass=base.RealizationMeta):
    names: Any = ...
    default_format: str = ...
    @classmethod
    def add_args(cls, parser: Any) -> None: ...
    def render_real_text(self, real_root: Any, price_map: Any, price_date: Any, options_map: Any, file: Any) -> None: ...
    def render_real_htmldiv(self, real_root: Any, price_map: Any, price_date: Any, options_map: Any, file: Any) -> None: ...

class StatsDirectivesReport(base.TableReport):
    names: Any = ...
    def generate_table(self, entries: Any, _: Any, __: Any): ...

class StatsPostingsReport(base.TableReport):
    names: Any = ...
    def generate_table(self, entries: Any, _: Any, __: Any): ...

__reports__: Any
