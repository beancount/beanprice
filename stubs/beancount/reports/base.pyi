from beancount.core import display_context as display_context, prices as prices, realization as realization
from beancount.parser import options as options, version as version
from beancount.reports import html_formatter as html_formatter
from beancount.utils import table as table
from typing import Any, Optional

class ReportError(Exception): ...

class Report:
    names: Any = ...
    default_format: Any = ...
    parser: Any = ...
    args: Any = ...
    def __init__(self, args: Any, parser: Any) -> None: ...
    @classmethod
    def from_args(cls, argv: Optional[Any] = ..., **kwds: Any): ...
    @classmethod
    def add_args(cls, parser: Any) -> None: ...
    @classmethod
    def get_supported_formats(cls): ...
    def render(self, entries: Any, errors: Any, options_map: Any, output_format: Optional[Any] = ..., file: Optional[Any] = ...): ...
    __call__: Any = ...

class HTMLReport(Report):
    default_format: str = ...
    formatter: Any = ...
    css_id: Any = ...
    css_class: Any = ...
    def __init__(self, *args: Any, formatter: Optional[Any] = ..., css_id: Optional[Any] = ..., css_class: Optional[Any] = ...) -> None: ...
    def render_html(self, entries: Any, errors: Any, options_map: Any, file: Any) -> None: ...

class TableReport(HTMLReport):
    default_format: str = ...
    def generate_table(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def render_text(self, entries: Any, errors: Any, options_map: Any, file: Any) -> None: ...
    def render_htmldiv(self, entries: Any, errors: Any, options_map: Any, file: Any) -> None: ...
    def render_csv(self, entries: Any, errors: Any, options_map: Any, file: Any) -> None: ...

class RealizationMeta(type):
    def __new__(mcs: Any, name: Any, bases: Any, namespace: Any): ...
    def render_real_html(cls, real_root: Any, price_map: Any, price_date: Any, options_map: Any, file: Any) -> None: ...

def get_html_template(): ...
