from beancount import loader as loader
from beancount.core import account as account, account_types as account_types, compare as compare, convert as convert, data as data, getters as getters, prices as prices
from beancount.ops import basicops as basicops
from beancount.parser import context as context, options as options, printer as printer, version as version
from beancount.reports import balance_reports as balance_reports, holdings_reports as holdings_reports, html_formatter as html_formatter, journal_html as journal_html, journal_reports as journal_reports, misc_reports as misc_reports, price_reports as price_reports
from beancount.utils import misc_utils as misc_utils, scrape as scrape, text_utils as text_utils
from beancount.web import bottle_utils as bottle_utils, views as views
from typing import Any, Optional

DEFAULT_VIEW_REDIRECT: str
FILELINK_PROTOCOL: str

class HTMLFormatter(html_formatter.HTMLFormatter):
    build_url: Any = ...
    leaf_only: Any = ...
    view_links: Any = ...
    account_xform: Any = ...
    def __init__(self, dcontext: Any, build_url: Any, leaf_only: Any, account_xform: Any, view_links: bool = ...) -> None: ...
    def build_global(self, *args: Any, **kwds: Any): ...
    EMS_PER_COMPONENT: float = ...
    def render_account(self, account_name: Any): ...
    def render_inventory(self, inv: Any): ...
    def render_context(self, entry: Any): ...
    def render_link(self, link: Any): ...
    def render_doc(self, filename: Any): ...
    def render_event_type(self, event: Any): ...
    def render_commodity(self, base_quote: Any): ...
    def render_source(self, source: Any): ...

def render_report(report_class: Any, entries: Any, args: Optional[Any] = ..., css_id: Optional[Any] = ..., css_class: Optional[Any] = ..., center: bool = ..., leaf_only: bool = ...): ...
def render_real_report(report_class: Any, real_root: Any, price_map: Any, price_date: Any, args: Optional[Any] = ..., leaf_only: bool = ...): ...

NOT_IMPLEMENTED: str
app: Any
A: Any

def render_overlay(contents: Any): ...
def render_global(*args: Any, **kw: Any): ...
def root() -> None: ...
def toc(): ...
def errors(): ...
def source(): ...
def link(link: Optional[Any] = ...): ...
def context_(ehash: Optional[Any] = ...): ...

GLOBAL_NAVIGATION: Any

def style(): ...
def favicon(): ...
def third_party(filename: Optional[Any] = ...): ...

doc_name: str

def doc(filename: Optional[Any] = ...): ...

viewapp: Any
V: Any
M: Any
Mp: Any
Mn: Any

def month_request(year: Any, month: Any): ...
def render_view(*args: Any, **kw: Any): ...

APP_NAVIGATION: Any
APP_NAVIGATION_MONTHLY_FULL: Any

def approot() -> None: ...
def index(): ...
def trial(): ...
def balsheet(): ...
def openbal(): ...
def income(): ...
def holdings_(): ...
def holdings_byaccount(): ...
def holdings_byrootaccount(): ...
def holdings_bycommodity(): ...
def holdings_bycurrency(): ...
def networth(): ...
def journal_all() -> None: ...
def journal_(account_name: Optional[Any] = ...): ...
def conversions_(): ...
def doc__view(filename: Optional[Any] = ...) -> None: ...
def documents(): ...
def prices_values(base: Optional[Any] = ..., quote: Optional[Any] = ...): ...
def commodities(): ...
def event(event: Optional[Any] = ...): ...
def event_index(): ...
def activity(): ...
def stats_types(): ...
def stats_postings(): ...
def handle_view(path_depth: Any): ...
def populate_view(callback: Any): ...
def url_restrict_generator(url_prefix: Any): ...
def get_all_view(app: Any): ...
def all(path: Optional[Any] = ...): ...
def month(year: Optional[Any] = ..., month: Optional[Any] = ..., path: Optional[Any] = ...): ...
def year(year: Optional[Any] = ..., path: Optional[Any] = ...): ...
def tag(tag: Optional[Any] = ..., path: Optional[Any] = ...): ...
def payee(payee: Optional[Any] = ..., path: Optional[Any] = ...): ...
def component(component: Optional[Any] = ..., path: Optional[Any] = ...): ...
def auto_reload_input_file(callback: Any): ...
def incognito(callback: Any): ...

template: Any

def run_app(args: Any, quiet: Optional[Any] = ...) -> None: ...

server: Any

def setup_monkey_patch_for_server_shutdown(): ...
def wait_ready() -> None: ...
def shutdown() -> None: ...
def add_web_arguments(argparser: Any): ...
def main() -> None: ...
def scrape_webapp(webargs: Any, callback: Any, ignore_regexp: Any): ...
def thread_server_start(web_args: Any, **kwargs: Any): ...
def thread_server_shutdown(thread: Any) -> None: ...
