import unittest
from collections import namedtuple
from typing import Any, Optional

get_test_port: Any

def nottest(func: Any): ...
def find_repository_root(filename: Optional[Any] = ...): ...
def find_python_lib(): ...
def subprocess_env(): ...
def run_with_args(function: Any, args: Any, runner_file: Optional[Any] = ...): ...
def call_command(command: Any): ...
def tempdir(delete: bool = ..., **kw: Any) -> None: ...
def create_temporary_files(root: Any, contents_map: Any) -> None: ...
def capture(*attributes: Any): ...
def patch(obj: Any, attributes: Any, replacement_type: Any) -> None: ...
def docfile(function: Any, **kwargs: Any): ...
def docfile_extra(**kwargs: Any): ...
def search_words(words: Any, line: Any): ...

class TestTempdirMixin:
    prefix: Any = ...
    tempdir: Any = ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...

class TmpFilesTestBase(unittest.TestCase):
    TEST_DOCUMENTS: Any = ...
    def setUp(self) -> None: ...
    def tearDown(self) -> None: ...
    @staticmethod
    def create_file_hierarchy(test_files: Any, subdir: str = ...): ...

class TestCase(unittest.TestCase):
    def assertLines(self, text1: Any, text2: Any, message: Optional[Any] = ...) -> None: ...
    def assertOutput(self, expected_text: Any) -> None: ...

def skipIfRaises(*exc_types: Any) -> None: ...
def make_failing_importer(*removed_module_names: Any): ...
def environ(varname: Any, newvalue: Any) -> None: ...

RCall = namedtuple('RCall', 'args kwargs return_value')

def record(fun: Any): ...
def remove_alt_csv_path() -> None: ...
