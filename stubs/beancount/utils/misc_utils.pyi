from typing import Any, Optional

def deprecated(message: Any): ...
def log_time(operation_name: Any, log_timings: Any, indent: int = ...) -> None: ...
def box(name: Optional[Any] = ..., file: Optional[Any] = ...) -> None: ...
def swallow(*exception_types: Any) -> None: ...
def groupby(keyfun: Any, elements: Any): ...
def filter_type(elist: Any, types: Any) -> None: ...
def longest(seq: Any): ...
def skipiter(iterable: Any, num_skip: Any) -> None: ...
def get_tuple_values(ntuple: Any, predicate: Any, memo: Optional[Any] = ...) -> None: ...
def replace_namedtuple_values(ntuple: Any, predicate: Any, mapper: Any, memo: Optional[Any] = ...): ...
def compute_unique_clean_ids(strings: Any): ...
def escape_string(string: Any): ...
def idify(string: Any): ...
def dictmap(mdict: Any, keyfun: Optional[Any] = ..., valfun: Optional[Any] = ...): ...
def map_namedtuple_attributes(attributes: Any, mapper: Any, object_: Any): ...
def staticvar(varname: Any, initial_value: Any): ...
def first_paragraph(docstring: Any): ...
def import_curses(): ...
def get_screen_width(): ...
def get_screen_height(): ...

class TypeComparable:
    def __eq__(self, other: Any) -> Any: ...

def cmptuple(name: Any, attributes: Any): ...
def uniquify(iterable: Any, keyfunc: Optional[Any] = ..., last: bool = ...): ...

UNSET: Any

def sorted_uniquify(iterable: Any, keyfunc: Optional[Any] = ..., last: bool = ...): ...
def is_sorted(iterable: Any, key: Any = ..., cmp: Any = ...): ...

class LineFileProxy:
    line_writer: Any = ...
    prefix: Any = ...
    write_newlines: Any = ...
    data: Any = ...
    def __init__(self, line_writer: Any, prefix: Optional[Any] = ..., write_newlines: bool = ...) -> None: ...
    def write(self, data: Any) -> None: ...
    def flush(self) -> None: ...
    def close(self) -> None: ...
