from beancount.core import data as data
from beancount.ops import validation as validation
from beancount.parser import booking as booking, options as options, parser as parser, printer as printer
from beancount.utils import encryption as encryption, file_utils as file_utils, misc_utils as misc_utils
from collections import namedtuple
from typing import Any, Optional

LoadError = namedtuple('LoadError', 'source message entry')
DEFAULT_PLUGINS_PRE: Any
DEFAULT_PLUGINS_POST: Any
RENAMED_MODULES: Any
PICKLE_CACHE_FILENAME: str
PICKLE_CACHE_THRESHOLD: float

def load_file(filename: Any, log_timings: Optional[Any] = ..., log_errors: Optional[Any] = ..., extra_validations: Optional[Any] = ..., encoding: Optional[Any] = ...): ...
def load_encrypted_file(filename: Any, log_timings: Optional[Any] = ..., log_errors: Optional[Any] = ..., extra_validations: Optional[Any] = ..., dedent: bool = ..., encoding: Optional[Any] = ...): ...
def get_cache_filename(pattern: str, filename: str) -> str: ...
def pickle_cache_function(cache_getter: Any, time_threshold: Any, function: Any): ...
def delete_cache_function(cache_getter: Any, function: Any): ...
def needs_refresh(options_map: Any): ...
def compute_input_hash(filenames: Any): ...
def load_string(string: Any, log_timings: Optional[Any] = ..., log_errors: Optional[Any] = ..., extra_validations: Optional[Any] = ..., dedent: bool = ..., encoding: Optional[Any] = ...): ...
def aggregate_options_map(options_map: Any, src_options_map: Any) -> None: ...
def run_transformations(entries: Any, parse_errors: Any, options_map: Any, log_timings: Any): ...
def combine_plugins(*plugin_modules: Any): ...
def load_doc(expect_errors: bool = ...): ...
def initialize(use_cache: bool, cache_filename: Optional[str]=...) -> Any: ...
