from beancount.core import amount as amount, convert as convert, data as data, flags as flags, getters as getters, interpolate as interpolate, inventory as inventory, prices as prices
from beancount.core.account_types import is_income_statement_account as is_income_statement_account
from beancount.core.data import Close as Close, Open as Open, Transaction as Transaction
from beancount.core.number import ZERO as ZERO
from beancount.ops import balance as balance
from beancount.parser import options as options
from beancount.utils import bisect_key as bisect_key
from typing import Any, Optional

def open(entries: Any, date: Any, account_types: Any, conversion_currency: Any, account_earnings: Any, account_opening: Any, account_conversions: Any): ...
def close(entries: Any, date: Any, conversion_currency: Any, account_conversions: Any): ...
def clear(entries: Any, date: Any, account_types: Any, account_earnings: Any): ...
def open_opt(entries: Any, date: Any, options_map: Any): ...
def close_opt(entries: Any, date: Any, options_map: Any): ...
def clear_opt(entries: Any, date: Any, options_map: Any): ...
def clamp(entries: Any, begin_date: Any, end_date: Any, account_types: Any, conversion_currency: Any, account_earnings: Any, account_opening: Any, account_conversions: Any): ...
def clamp_opt(entries: Any, begin_date: Any, end_date: Any, options_map: Any): ...
def cap(entries: Any, account_types: Any, conversion_currency: Any, account_earnings: Any, account_conversions: Any): ...
def cap_opt(entries: Any, options_map: Any): ...
def transfer_balances(entries: Any, date: Any, account_pred: Any, transfer_account: Any): ...
def summarize(entries: Any, date: Any, account_opening: Any): ...
def conversions(entries: Any, conversion_account: Any, conversion_currency: Any, date: Optional[Any] = ...): ...
def truncate(entries: Any, date: Any): ...
def create_entries_from_balances(balances: Any, date: Any, source_account: Any, direction: Any, meta: Any, flag: Any, narration_template: Any): ...
def balance_by_account(entries: Any, date: Optional[Any] = ..., compress_unbooked: bool = ...): ...
def get_open_entries(entries: Any, date: Any): ...
