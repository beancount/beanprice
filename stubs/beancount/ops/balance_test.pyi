import unittest
from beancount import loader as loader
from beancount.core.amount import A as A
from beancount.core.number import D as D
from beancount.ops import balance as balance
from typing import Any

class TestBalance(unittest.TestCase):
    def test_simple_error(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_simple_first(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_simple_cont(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_simple_partial_currency_first(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_simple_partial_currency_cont(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_simple_invalid_currency(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_parents(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_parents_only(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_parents_with_postings(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_with_lots(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_check_samedate(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_precision(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_balance_before_create(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_balance_with_prefix_account(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_balance_mixed_cost_and_no_cost(self, entries: Any, errors: Any, __: Any) -> None: ...
    def test_balance_account_does_not_exist(self, entries: Any, errors: Any, __: Any) -> None: ...

class TestBalancePrecision(unittest.TestCase):
    def test_get_balance_tolerance__explicit(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_get_balance_tolerance__regular(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_balance_with_tolerance(self, entries: Any, errors: Any, __: Any) -> None: ...
