from beancount import loader as loader
from beancount.core import convert as convert, data as data, flags as flags, interpolate as interpolate, inventory as inventory
from beancount.ops import summarize as summarize
from beancount.parser import cmptest as cmptest, options as options, printer as printer
from beancount.utils import misc_utils as misc_utils
from typing import Any

class TestOpenClose(cmptest.TestCase):
    entries: Any = ...
    options_map: Any = ...
    account_types: Any = ...
    def setUp(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def do_open(self, entries: Any, date: Any, *args: Any): ...
    def do_close(self, entries: Any, date: Any, *args: Any): ...
    def do_clear(self, entries: Any, date: Any, *args: Any): ...
    def test_open(self) -> None: ...
    def test_close(self) -> None: ...
    def test_clear(self) -> None: ...
    def test_open_close_clear(self) -> None: ...

class TestOpenCloseWithOptions(TestOpenClose):
    def do_open(self, entries: Any, date: Any, *args: Any): ...
    def do_close(self, entries: Any, date: Any, *args: Any): ...
    def do_clear(self, entries: Any, date: Any, *args: Any): ...

class TestClamp(cmptest.TestCase):
    def test_clamp(self, entries: Any, errors: Any, options_map: Any) -> None: ...

class TestCap(cmptest.TestCase):
    def test_cap(self, entries: Any, errors: Any, options_map: Any) -> None: ...

INPUT_PLUGINS: str
INPUT_OPEN: str
INPUT_PRICES_REDUNDANT: str
INPUT_PRICES_LAST: str
INPUT_BEFORE: str
INPUT_PERIOD: str
INPUT_PERIOD_REMOVED: str
INPUT: Any

class TestTransferBalances(cmptest.TestCase):
    TRANSFER_ACCOUNT: str = ...
    def setUp(self) -> None: ...
    def test_transfer_balances__empty(self): ...
    def test_transfer_balances__middle_assets(self): ...
    def test_transfer_balances__middle_at_cost(self): ...
    def test_transfer_balances__end_assets_implicit(self): ...
    def test_transfer_balances__end_assets_explicit(self): ...
    def test_transfer_balances__middle_income(self): ...

class TestSummarize(cmptest.TestCase):
    OPENING_ACCOUNT: str = ...
    def test_summarize__complete(self) -> None: ...
    def test_summarize__ordering_non_transactions(self, entries: Any, _: Any, __: Any): ...

class TestConversions(cmptest.TestCase):
    ACCOUNT: str = ...
    entries: Any = ...
    def setUp(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_conversions__empty(self) -> None: ...
    def test_conversions__not_needed(self) -> None: ...
    def test_conversions__needed_middle(self) -> None: ...
    def test_conversions__with_transactions_at_cost(self) -> None: ...
    def test_conversions__multiple(self) -> None: ...
    def test_conversions__no_date(self) -> None: ...
    def test_conversions__non_empty_but_empty_cost(self, entries: Any, _: Any, __: Any) -> None: ...

class TestTruncate(cmptest.TestCase):
    entries: Any = ...
    def setUp(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_truncate__before(self) -> None: ...
    def test_truncate__normal1(self) -> None: ...
    def test_truncate__normal2(self) -> None: ...
    def test_truncate__after(self) -> None: ...

class TestEntriesFromBalance(cmptest.TestCase):
    SOURCE_ACCOUNT: str = ...
    META: Any = ...
    def test_create_entries_from_balances__empty(self) -> None: ...
    balances: Any = ...
    def setUp(self) -> None: ...
    def test_create_entries_from_balances__simple(self) -> None: ...
    def test_create_entries_from_balances__reverse(self) -> None: ...

class TestBalanceByAccount(cmptest.TestCase):
    entries: Any = ...
    def setUp(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_balance_by_account__no_end_date(self) -> None: ...
    def test_balance_by_account__first_date(self) -> None: ...
    def test_balance_by_account__middle(self) -> None: ...

class TestOpenAtDate(cmptest.TestCase):
    entries: Any = ...
    def setUp(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_get_open_entries__before(self) -> None: ...
    def test_get_open_entries__first_entry_open(self) -> None: ...
    def test_get_open_entries__after_first_entry_open(self) -> None: ...
    def test_get_open_entries__first_close(self) -> None: ...
    def test_get_open_entries__after_first_close(self) -> None: ...
    def test_get_open_entries__after_new_opens(self) -> None: ...
    def test_get_open_entries__after_all_opens(self) -> None: ...
    def test_get_open_entries__after_all_entries(self) -> None: ...
    def test_get_open_entries__duplicate_open(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_get_open_entries__closed_twice(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_get_open_entries__closed_without_open(self, entries: Any, errors: Any, _: Any) -> None: ...
