from beancount import loader as loader
from beancount.core import data as data
from beancount.ops import validation as validation
from beancount.parser import cmptest as cmptest
from typing import Any

class TestValidateOpenClose(cmptest.TestCase):
    def test_validate_open_close__duplicate_open(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_validate_open_close__duplicate_close(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_validate_open_close__close_unopened(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_validate_open_close__ordering(self, entries: Any, _: Any, options_map: Any) -> None: ...

class TestValidateDuplicateBalances(cmptest.TestCase):
    def test_validate_duplicate_balances(self, entries: Any, _: Any, options_map: Any) -> None: ...

class TestValidateDuplicateCommodities(cmptest.TestCase):
    def test_validate_duplicate_commodities(self, entries: Any, _: Any, options_map: Any) -> None: ...

class TestValidateActiveAccounts(cmptest.TestCase):
    def test_validate_active_accounts(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_validate_active_accounts__unopened(self, entries: Any, _: Any, options_map: Any) -> None: ...
    def test_validate_balance_after_close(self, entries: Any, _: Any, options_map: Any) -> None: ...

class TestValidateCurrencyConstraints(cmptest.TestCase):
    def test_validate_currency_constraints(self, entries: Any, _: Any, options_map: Any) -> None: ...

class TestValidateDocumentPaths(cmptest.TestCase):
    def test_validate_documents_paths(self) -> None: ...

class TestValidateDataTypes(cmptest.TestCase):
    def test_validate_data_types(self, entries: Any, errors: Any, options_map: Any) -> None: ...

class TestValidateCheckTransactionBalances(cmptest.TestCase):
    def test_validate_check_transaction_balances(self, entries: Any, errors: Any, options_map: Any) -> None: ...

class TestValidate(cmptest.TestCase):
    def test_validate(self, entries: Any, errors: Any, options_map: Any) -> None: ...

class TestValidateTolerances(cmptest.TestCase):
    def test_tolerance_implicit_integral(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_tolerance_implicit_fractional_global(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_tolerance_implicit_fractional_specific(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_tolerance_implicit_fractional_withprec(self, entries: Any, errors: Any, options_map: Any) -> None: ...
