import enum
from beancount.core.account import has_component as has_component
from beancount.core.amount import Amount as Amount
from beancount.core.number import D as D
from beancount.core.position import Cost as Cost, CostSpec as CostSpec
from beancount.utils.bisect_key import bisect_left_with_key as bisect_left_with_key
from typing import Any, Dict, List, NamedTuple, Optional, Tuple, Union

Account = str
Currency = str
Flag = str
Meta = Dict[str, Any]
EMPTY_SET: Any

class Booking(enum.Enum):
    STRICT: str = ...
    NONE: str = ...
    AVERAGE: str = ...
    FIFO: str = ...
    LIFO: str = ...

def new_directive(clsname: Any, fields: List[Tuple]) -> NamedTuple: ...

Open: Any
Close: Any
Commodity: Any
Pad: Any
Balance: Any
Posting: Any
Transaction: Any
TxnPosting: Any
Note: Any
Event: Any
Query: Any
Price: Any
Document: Any
Custom: Any
ALL_DIRECTIVES: Any
Directive = Union[Open, Close, Commodity, Pad, Balance, Transaction, Note, Event, Query, Price, Document, Custom]
Entries = List[Directive]
Options = Dict[str, Any]

def new_metadata(filename: Any, lineno: Any, kvlist: Optional[Any] = ...): ...
def create_simple_posting(entry: Any, account: Any, number: Any, currency: Any): ...
def create_simple_posting_with_cost(entry: Any, account: Any, number: Any, currency: Any, cost_number: Any, cost_currency: Any): ...

NoneType: Any

def sanity_check_types(entry: Any, allow_none_for_tags_and_links: bool = ...) -> None: ...
def posting_has_conversion(posting: Any): ...
def transaction_has_conversion(transaction: Any): ...
def get_entry(posting_or_entry: Any): ...

SORT_ORDER: Any

def entry_sortkey(entry: Any): ...
def sorted(entries: Any): ...
def posting_sortkey(entry: Any): ...
def filter_txns(entries: Any) -> None: ...
def has_entry_account_component(entry: Any, component: Any): ...
def find_closest(entries: Any, filename: Any, lineno: Any): ...
def remove_account_postings(account: Any, entries: Any): ...
def iter_entry_dates(entries: Any, date_begin: Any, date_end: Any): ...
