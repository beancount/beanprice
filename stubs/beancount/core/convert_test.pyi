import unittest
from beancount import loader as loader
from beancount.core import convert as convert, data as data, inventory as inventory, prices as prices
from beancount.core.amount import A as A
from beancount.core.number import D as D, MISSING as MISSING
from beancount.core.position import Cost as Cost, Position as Position
from typing import Any

def build_price_map_util(date_currency_price_tuples: Any): ...

class TestPositionConversions(unittest.TestCase):
    def test_units(self) -> None: ...
    def test_cost__empty(self) -> None: ...
    def test_cost__not_empty(self) -> None: ...
    def test_cost__missing(self) -> None: ...
    def test_weight__no_cost(self) -> None: ...
    def test_weight__with_cost(self) -> None: ...
    def test_weight__with_cost_missing(self) -> None: ...
    def test_old_test(self) -> None: ...
    PRICE_MAP_EMPTY: Any = ...
    PRICE_MAP_HIT: Any = ...
    def test_value__no_currency(self) -> None: ...
    def test_value__currency_from_cost(self) -> None: ...
    def test_convert_position__success(self) -> None: ...
    def test_convert_position__miss_but_same_currency(self) -> None: ...
    def test_convert_position__miss_and_miss_rate_to_rate(self) -> None: ...
    PRICE_MAP_RATEONLY: Any = ...
    def test_convert_position__miss_and_miss_value_rate(self) -> None: ...
    def test_convert_position__miss_and_miss_both(self) -> None: ...
    def test_convert_position__miss_and_success_on_implieds(self) -> None: ...
    def test_convert_amount__fail(self) -> None: ...
    def test_convert_amount__success(self) -> None: ...
    def test_convert_amount__noop(self) -> None: ...
    def test_convert_amount_with_date(self, entries: Any, _: Any, __: Any) -> None: ...

class TestPostingConversions(TestPositionConversions):
    def test_weight_with_cost_and_price(self) -> None: ...
    def test_weight_with_only_price(self) -> None: ...
    def test_value__currency_from_price(self) -> None: ...
    def test_convert_position__currency_from_price(self) -> None: ...

class TestMarketValue(unittest.TestCase):
    price_map: Any = ...
    def setUp(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_no_change(self) -> None: ...
    def test_other_currency(self) -> None: ...
    def test_mixed_currencies(self) -> None: ...
    def test_stock_single(self) -> None: ...
    def test_stock_many_lots(self) -> None: ...
    def test_stock_different_ones(self) -> None: ...
    def test_stock_not_found(self) -> None: ...
