import unittest
from beancount import loader as loader
from beancount.core import account_types as account_types, data as data, display_context as display_context, inventory as inventory, position as position, realization as realization
from beancount.core.amount import A as A
from beancount.core.number import D as D
from beancount.core.realization import RealAccount as RealAccount
from beancount.utils import test_utils as test_utils
from typing import Any

def create_simple_account(): ...
def create_real(account_value_pairs: Any): ...

class TestRealAccount(unittest.TestCase):
    def test_ctor(self) -> None: ...
    def test_str(self) -> None: ...
    def test_equality(self) -> None: ...
    def test_getitem_setitem(self) -> None: ...
    def test_setitem_constraints(self) -> None: ...
    def test_clone(self) -> None: ...

class TestRealGetters(unittest.TestCase):
    def test_get(self) -> None: ...
    def test_get_or_create(self) -> None: ...
    def test_contains(self) -> None: ...
    def test_iter_children(self) -> None: ...

class TestRealization(unittest.TestCase):
    def test_postings_by_account(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_realize_empty(self) -> None: ...
    def test_realize_min_accoumts(self) -> None: ...
    def test_simple_realize(self, entries: Any, errors: Any, options_map: Any) -> None: ...
    def test_realize(self) -> None: ...

class TestRealFilter(unittest.TestCase):
    def test_filter_to_empty(self): ...
    def test_filter_almost_all(self): ...
    def test_filter_with_leaves(self): ...
    def test_filter_no_leaves(self): ...
    def test_filter_misc(self): ...

class TestRealOther(test_utils.TestCase):
    def test_get_postings(self, entries: Any, errors: Any, _: Any) -> None: ...
    def test_compare_realizations(self) -> None: ...
    def test_iterate_with_balance(self, entries: Any, _: Any, __: Any): ...
    def test_compute_balance(self) -> None: ...
    def test_dump(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_dump_balances(self, entries: Any, _: Any, options_map: Any) -> None: ...

class TestRealMisc(unittest.TestCase):
    def test_index_key(self): ...

class TestFindLastActive(unittest.TestCase):
    def test_find_last_active_posting(self, entries: Any, _: Any, __: Any) -> None: ...

class TestComputeBalance(unittest.TestCase):
    def test_compute_postings_balance(self, entries: Any, _: Any, __: Any) -> None: ...
