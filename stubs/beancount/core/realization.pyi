from beancount.core import account as account, amount as amount, convert as convert, data as data, flags as flags, inventory as inventory
from beancount.core.data import Balance as Balance, Close as Close, Custom as Custom, Document as Document, Note as Note, Open as Open, Pad as Pad, Posting as Posting, Transaction as Transaction, TxnPosting as TxnPosting
from typing import Any, Optional

class RealAccount(dict):
    account: Any = ...
    txn_postings: Any = ...
    balance: Any = ...
    def __init__(self, account_name: Any, *args: Any, **kwargs: Any) -> None: ...
    def __setitem__(self, key: Any, value: Any): ...
    def copy(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

def iter_children(real_account: Any, leaf_only: bool = ...) -> None: ...
def get(real_account: Any, account_name: Any, default: Optional[Any] = ...): ...
def get_or_create(real_account: Any, account_name: Any): ...
def contains(real_account: Any, account_name: Any): ...
def realize(entries: Any, min_accounts: Optional[Any] = ..., compute_balance: bool = ...): ...
def postings_by_account(entries: Any): ...
def filter(real_account: Any, predicate: Any): ...
def get_postings(real_account: Any): ...
def iterate_with_balance(txn_postings: Any): ...
def compute_balance(real_account: Any, leaf_only: bool = ...): ...
def find_last_active_posting(txn_postings: Any): ...
def index_key(sequence: Any, value: Any, key: Any, cmp: Any): ...
def dump(root_account: Any): ...

PREFIX_CHILD_1: str
PREFIX_CHILD_C: str
PREFIX_LEAF_1: str
PREFIX_LEAF_C: str

def dump_balances(real_root: Any, dformat: Any, at_cost: bool = ..., fullnames: bool = ..., file: Optional[Any] = ...): ...
def compute_postings_balance(txn_postings: Any): ...
