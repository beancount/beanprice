from beancount import loader as loader
from beancount.core import amount as amount, data as data
from beancount.core.number import ONE as ONE
from beancount.ops import find_prices as find_prices
from beancount.parser import printer as printer, version as version
from beancount.utils import date_utils as date_utils
from collections import namedtuple
from typing import Any, Optional

DatedPrice = namedtuple('DatedPrice', 'base quote date sources')

PriceSource = namedtuple('PriceSource', 'module symbol invert')
DEFAULT_PACKAGE: str
UNKNOWN_CURRENCY: str
DEFAULT_EXPIRATION: Any
DEFAULT_SOURCE: str

def format_dated_price_str(dprice: Any): ...
def parse_source_map(source_map_spec: Any): ...
def parse_single_source(source: Any): ...
def import_source(module_name: Any): ...
def find_currencies_declared(entries: Any, date: Optional[Any] = ...): ...
def log_currency_list(message: Any, currencies: Any) -> None: ...
def get_price_jobs_at_date(entries: Any, date: Optional[Any] = ..., inactive: bool = ..., undeclared_source: Optional[Any] = ...): ...
def now(): ...
def fetch_cached_price(source: Any, symbol: Any, date: Any): ...
def setup_cache(cache_filename: Any, clear_cache: Any) -> None: ...
def reset_cache() -> None: ...
def fetch_price(dprice: Any, swap_inverted: bool = ...): ...
def filter_redundant_prices(price_entries: Any, existing_entries: Any, diffs: bool = ...): ...
def process_args(): ...
def main(): ...
