import unittest
from beancount import loader as loader
from beancount.core.number import D as D
from beancount.parser import cmptest as cmptest
from beancount.prices import price as price
from beancount.prices.source import SourcePrice as SourcePrice
from beancount.prices.sources import yahoo as yahoo
from beancount.utils import test_utils as test_utils
from typing import Any

PS: Any

class TestSetupCache(unittest.TestCase):
    def test_clear_cache_unset(self) -> None: ...
    def test_clear_cache_not_present(self) -> None: ...
    def test_clear_cache_present(self) -> None: ...
    def test_leave_cache(self) -> None: ...

class TestCache(unittest.TestCase):
    def test_fetch_cached_price__disabled(self) -> None: ...
    def test_fetch_cached_price__latest(self) -> None: ...
    def test_fetch_cached_price__historical(self) -> None: ...

class TestProcessArguments(unittest.TestCase):
    def test_filename_not_exists(self) -> None: ...
    def test_explicit_file__badcontents(self, filename: Any) -> None: ...
    def test_filename_exists(self) -> None: ...
    def test_expressions(self) -> None: ...

class TestClobber(cmptest.TestCase):
    entries: Any = ...
    def setUp(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_clobber_nodiffs(self) -> None: ...
    def test_clobber_diffs(self) -> None: ...

class TestTimezone(unittest.TestCase):
    def test_fetch_price__naive_time_no_timeozne(self, fetch_cached: Any) -> None: ...

class TestInverted(unittest.TestCase):
    dprice: Any = ...
    def setUp(self) -> None: ...
    def test_fetch_price__normal(self) -> None: ...
    def test_fetch_price__inverted(self) -> None: ...
    def test_fetch_price__swapped(self) -> None: ...

class TestImportSource(unittest.TestCase):
    def test_import_source_valid(self) -> None: ...
    def test_import_source_invalid(self) -> None: ...

class TestParseSource(unittest.TestCase):
    def test_source_invalid(self) -> None: ...
    def test_source_valid(self) -> None: ...

class TestParseSourceMap(unittest.TestCase):
    def test_source_map_invalid(self) -> None: ...
    def test_source_map_onecur_single(self) -> None: ...
    def test_source_map_onecur_multiple(self) -> None: ...
    def test_source_map_manycur_single(self) -> None: ...
    def test_source_map_manycur_multiple(self) -> None: ...
    def test_source_map_inverse(self) -> None: ...

class TestFilters(unittest.TestCase):
    def test_get_price_jobs__date(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_get_price_jobs__inactive(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_get_price_jobs__undeclared(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_get_price_jobs__default_source(self, entries: Any, _: Any, __: Any) -> None: ...

class TestFromFile(unittest.TestCase):
    entries: Any = ...
    def setUp(self, entries: Any, _: Any, __: Any) -> None: ...
    def test_find_currencies_declared(self) -> None: ...
