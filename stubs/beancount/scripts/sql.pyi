from beancount import loader as loader
from beancount.core import data as data
from beancount.parser import version as version
from beancount.utils import misc_utils as misc_utils
from typing import Any

def output_common(connection: Any, unused_entries: Any) -> None: ...
def output_transactions(connection: Any, entries: Any) -> None: ...

class DirectiveWriter:
    type: Any = ...
    columns: Any = ...
    name: Any = ...
    def __init__(self) -> None: ...
    def __call__(self, connection: Any, entries: Any) -> None: ...
    def get_detail(self, entry: Any) -> None: ...

class OpenWriter(DirectiveWriter):
    type: Any = ...
    columns: str = ...
    def get_detail(self, entry: Any): ...

class CloseWriter(DirectiveWriter):
    type: Any = ...
    columns: str = ...
    def get_detail(self, entry: Any): ...

class PadWriter(DirectiveWriter):
    type: Any = ...
    columns: str = ...
    def get_detail(self, entry: Any): ...

class BalanceWriter(DirectiveWriter):
    type: Any = ...
    columns: str = ...
    def get_detail(self, entry: Any): ...

class NoteWriter(DirectiveWriter):
    type: Any = ...
    columns: str = ...
    def get_detail(self, entry: Any): ...

class EventWriter(DirectiveWriter):
    type: Any = ...
    columns: str = ...
    def get_detail(self, entry: Any): ...

class QueryWriter(DirectiveWriter):
    type: Any = ...
    columns: str = ...
    def get_detail(self, entry: Any): ...

class PriceWriter(DirectiveWriter):
    type: Any = ...
    columns: str = ...
    def get_detail(self, entry: Any): ...

class DocumentWriter(DirectiveWriter):
    type: Any = ...
    columns: str = ...
    def get_detail(self, entry: Any): ...

def adapt_decimal(number: Any): ...
def convert_decimal(string: Any): ...
def setup_decimal_support() -> None: ...
def main(): ...
