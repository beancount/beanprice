from beancount import loader as loader
from beancount.core import amount as amount, convert as convert, data as data, display_context as display_context, getters as getters, inventory as inventory, prices as prices, realization as realization
from beancount.core.account import join as join
from beancount.core.number import D as D, ZERO as ZERO, round_to as round_to
from beancount.ops import validation as validation
from beancount.parser import booking as booking, parser as parser, printer as printer, version as version
from beancount.scripts import format as format
from beancount.utils import date_utils as date_utils, misc_utils as misc_utils
from typing import Any, Optional

ONE_DAY: Any
ANNUAL_SALARY: Any
ANNUAL_VACATION_DAYS: Any
RENT_DIVISOR: Any
RENT_INCREMENT: Any
EMPLOYERS: Any
RESTAURANT_NAMES: Any
RESTAURANT_NARRATIONS: Any
GROCERIES_NAMES: Any
HOME_NAME: str
TRIP_DESTINATIONS: Any
RETIREMENT_LIMITS: Any
FILE_PREAMBLE: str

def parse(input_string: Any, **replacements: Any): ...
def date_iter(date_begin: Any, date_end: Any) -> None: ...
def date_random_seq(date_begin: Any, date_end: Any, days_min: Any, days_max: Any) -> None: ...
def delay_dates(date_iter: Any, delay_days_min: Any, delay_days_max: Any) -> None: ...
def merge_postings(entries: Any, accounts: Any): ...
def postings_for(entries: Any, accounts: Any, before: bool = ...) -> None: ...
def iter_dates_with_balance(date_begin: Any, date_end: Any, entries: Any, accounts: Any) -> None: ...
def iter_quarters(date_begin: Any, date_end: Any) -> None: ...
def get_minimum_balance(entries: Any, account: Any, currency: Any): ...
def generate_employment_income(employer_name: Any, employer_address: Any, annual_salary: Any, account_deposit: Any, account_retirement: Any, date_begin: Any, date_end: Any): ...
def generate_tax_preamble(date_birth: Any): ...
def generate_tax_accounts(year: Any, date_max: Any): ...
def generate_retirement_employer_match(entries: Any, account_invest: Any, account_income: Any): ...
def generate_retirement_investments(entries: Any, account: Any, commodities_items: Any, price_map: Any): ...
def generate_banking(entries: Any, date_begin: Any, date_end: Any, amount_initial: Any): ...
def generate_taxable_investment(date_begin: Any, date_end: Any, entries: Any, price_map: Any, stocks: Any): ...
def generate_periodic_expenses(date_iter: Any, payee: Any, narration: Any, account_from: Any, account_to: Any, amount_generator: Any): ...
def generate_clearing_entries(date_iter: Any, payee: Any, narration: Any, entries: Any, account_clear: Any, account_from: Any): ...
def generate_outgoing_transfers(entries: Any, account: Any, account_out: Any, transfer_minimum: Any, transfer_threshold: Any, transfer_increment: Any): ...
def generate_expense_accounts(date_birth: Any): ...
def generate_open_entries(date: Any, accounts: Any, currency: Optional[Any] = ...): ...
def generate_balance_checks(entries: Any, account: Any, date_iter: Any): ...
def check_non_negative(entries: Any, account: Any, currency: Any) -> None: ...
def validate_output(contents: Any, positive_accounts: Any, currency: Any) -> None: ...
def generate_banking_expenses(date_begin: Any, date_end: Any, account: Any, rent_amount: Any): ...
def generate_regular_credit_expenses(date_birth: Any, date_begin: Any, date_end: Any, account_credit: Any, account_checking: Any): ...
def compute_trip_dates(date_begin: Any, date_end: Any) -> None: ...
def generate_trip_entries(date_begin: Any, date_end: Any, tag: Any, config: Any, trip_city: Any, home_city: Any, account_credit: Any): ...
def price_series(start: Any, mu: Any, sigma: Any) -> None: ...
def generate_prices(date_begin: Any, date_end: Any, currencies: Any, cost_currency: Any): ...
def replace(string: Any, replacements: Any, strip: bool = ...): ...
def generate_commodity_entries(date_birth: Any): ...
def contextualize_file(contents: Any, employer: Any): ...
def write_example_file(date_birth: Any, date_begin: Any, date_end: Any, reformat: Any, file: Any) -> None: ...
def main(): ...
