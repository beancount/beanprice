from beancount.core.number import D as D
from beancount.utils.misc_utils import cmptuple as cmptuple
from collections import namedtuple
from typing import Any, Optional

Select = namedtuple('Select', 'targets from_clause where_clause group_by order_by pivot_by limit distinct flatten')

Balances = namedtuple('Balances', 'summary_func from_clause where_clause')

Journal = namedtuple('Journal', 'account summary_func from_clause')

Print = namedtuple('Print', 'from_clause')

Errors = namedtuple('Errors', '')

Reload = namedtuple('Reload', '')

Explain = namedtuple('Explain', 'statement')

RunCustom = namedtuple('RunCustom', 'query_name')
Target: Any
Wildcard: Any
From: Any
GroupBy: Any
OrderBy: Any
PivotBy: Any
Column: Any
Function: Any
Constant: Any
UnaryOp: Any

class Not(UnaryOp): ...

BinaryOp: Any

class And(BinaryOp): ...
class Or(BinaryOp): ...
class Equal(BinaryOp): ...
class Greater(BinaryOp): ...
class GreaterEq(BinaryOp): ...
class Less(BinaryOp): ...
class LessEq(BinaryOp): ...
class Match(BinaryOp): ...
class Contains(BinaryOp): ...
class Mul(BinaryOp): ...
class Div(BinaryOp): ...
class Add(BinaryOp): ...
class Sub(BinaryOp): ...
class ParseError(Exception): ...

class Lexer:
    keywords: Any = ...
    tokens: Any = ...
    def t_ID(self, token: Any): ...
    def t_STRING(self, token: Any): ...
    def t_DATE(self, token: Any): ...
    t_COMMA: str = ...
    t_SEMI: str = ...
    t_LPAREN: str = ...
    t_RPAREN: str = ...
    t_NE: str = ...
    t_EQ: str = ...
    t_GTE: str = ...
    t_GT: str = ...
    t_LTE: str = ...
    t_LT: str = ...
    t_TILDE: str = ...
    t_ASTERISK: str = ...
    t_SLASH: str = ...
    t_PLUS: str = ...
    t_MINUS: str = ...
    def t_DECIMAL(self, token: Any): ...
    def t_INTEGER(self, token: Any): ...
    t_ignore: str = ...
    def t_error(self, token: Any) -> None: ...

class SelectParser(Lexer):
    start: str = ...
    ply_lexer: Any = ...
    ply_parser: Any = ...
    default_close_date: Any = ...
    def __init__(self, **options: Any) -> None: ...
    def tokenize(self, line: Any) -> None: ...
    def parse(self, line: Any, debug: bool = ..., default_close_date: Optional[Any] = ...): ...
    def handle_comma_separated_list(self, p: Any): ...
    def p_account(self, p: Any) -> None: ...
    def p_select_statement(self, p: Any) -> None: ...
    def p_distinct(self, p: Any) -> None: ...
    def p_target_spec(self, p: Any) -> None: ...
    def p_target_list(self, p: Any) -> None: ...
    def p_target(self, p: Any) -> None: ...
    def p_from(self, p: Any) -> None: ...
    def p_from_subselect(self, p: Any) -> None: ...
    def p_opt_open(self, p: Any) -> None: ...
    def p_opt_close(self, p: Any) -> None: ...
    def p_opt_clear(self, p: Any) -> None: ...
    def p_where(self, p: Any) -> None: ...
    def p_expr_index_list(self, p: Any) -> None: ...
    def p_expr_index(self, p: Any) -> None: ...
    def p_group_by(self, p: Any) -> None: ...
    def p_having(self, p: Any) -> None: ...
    def p_order_by(self, p: Any) -> None: ...
    def p_ordering(self, p: Any) -> None: ...
    def p_pivot_by(self, p: Any) -> None: ...
    def p_limit(self, p: Any) -> None: ...
    def p_flatten(self, p: Any) -> None: ...
    precedence: Any = ...
    def p_expression_and(self, p: Any) -> None: ...
    def p_expression_or(self, p: Any) -> None: ...
    def p_expression_not(self, p: Any) -> None: ...
    def p_expression_paren(self, p: Any) -> None: ...
    def p_expression_eq(self, p: Any) -> None: ...
    def p_expression_ne(self, p: Any) -> None: ...
    def p_expression_gt(self, p: Any) -> None: ...
    def p_expression_gte(self, p: Any) -> None: ...
    def p_expression_lt(self, p: Any) -> None: ...
    def p_expression_lte(self, p: Any) -> None: ...
    def p_expression_match(self, p: Any) -> None: ...
    def p_expression_contains(self, p: Any) -> None: ...
    def p_expression_column(self, p: Any) -> None: ...
    def p_expression_constant(self, p: Any) -> None: ...
    def p_expression_mul(self, p: Any) -> None: ...
    def p_expression_div(self, p: Any) -> None: ...
    def p_expression_add(self, p: Any) -> None: ...
    def p_expression_sub(self, p: Any) -> None: ...
    def p_expression_function(self, p: Any) -> None: ...
    def p_opt_expression(self, p: Any) -> None: ...
    def p_expression_list_opt(self, p: Any) -> None: ...
    def p_expression_list(self, p: Any) -> None: ...
    def p_column(self, p: Any) -> None: ...
    def p_column_list(self, p: Any) -> None: ...
    def p_constant(self, p: Any) -> None: ...
    def p_boolean(self, p: Any) -> None: ...
    def p_empty(self, _: Any) -> None: ...
    def p_error(self, token: Any) -> None: ...

class Parser(SelectParser):
    start: str = ...
    def p_regular_statement(self, p: Any) -> None: ...
    def p_explain_statement(self, p: Any) -> None: ...
    def p_statement(self, p: Any) -> None: ...
    def p_delimiter(self, p: Any) -> None: ...
    def p_balances_statement(self, p: Any) -> None: ...
    def p_journal_statement(self, p: Any) -> None: ...
    def p_summary_func(self, p: Any) -> None: ...
    def p_print_statement(self, p: Any) -> None: ...
    def p_run_statement(self, p: Any) -> None: ...
    def p_errors_statement(self, p: Any) -> None: ...
    def p_reload_statement(self, p: Any) -> None: ...

def get_expression_name(expr: Any): ...
