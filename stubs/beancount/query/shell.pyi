import cmd
from beancount import loader as loader
from beancount.core import data as data
from beancount.parser import printer as printer, version as version
from beancount.query import numberify as numberify, query_compile as query_compile, query_env as query_env, query_execute as query_execute, query_parser as query_parser, query_render as query_render
from beancount.utils import misc_utils as misc_utils, pager as pager
from typing import Any, Optional

HISTORY_FILENAME: str

def load_history(filename: Any) -> None: ...
def save_history(filename: Any) -> None: ...
def get_history(max_entries: Any): ...
def convert_bool(string: Any): ...

class DispatchingShell(cmd.Cmd):
    max_entries: int = ...
    doc_header: str = ...
    misc_header: str = ...
    is_interactive: Any = ...
    parser: Any = ...
    outfile: Any = ...
    def __init__(self, is_interactive: Any, parser: Any, outfile: Any, default_format: Any, do_numberify: Any) -> None: ...
    vars_types: Any = ...
    vars: Any = ...
    def initialize_vars(self, default_format: Any, do_numberify: Any) -> None: ...
    def add_help(self): ...
    def get_pager(self): ...
    def cmdloop(self) -> None: ...
    def do_help(self, command: Any) -> None: ...
    def do_history(self, _: Any) -> None: ...
    def do_clear(self, _: Any) -> None: ...
    def do_set(self, line: Any) -> None: ...
    def do_lex(self, line: Any) -> None: ...
    do_tokenize: Any = ...
    def do_parse(self, line: Any) -> None: ...
    def dispatch(self, statement: Any): ...
    def default(self, line: Any) -> None: ...
    def run_parser(self, line: Any, default_close_date: Optional[Any] = ...) -> None: ...
    def emptyline(self) -> None: ...
    def exit(self, _: Any): ...
    do_exit: Any = ...
    do_quit: Any = ...
    do_EOF: Any = ...

class BQLShell(DispatchingShell):
    prompt: str = ...
    loadfun: Any = ...
    entries: Any = ...
    errors: Any = ...
    options_map: Any = ...
    env_targets: Any = ...
    env_entries: Any = ...
    env_postings: Any = ...
    def __init__(self, is_interactive: Any, loadfun: Any, outfile: Any, default_format: str = ..., do_numberify: bool = ...) -> None: ...
    def on_Reload(self, unused_statement: Optional[Any] = ...) -> None: ...
    def on_Errors(self, errors_statement: Any) -> None: ...
    def on_Print(self, print_stmt: Any) -> None: ...
    def on_Select(self, statement: Any) -> None: ...
    def on_Journal(self, journal: Any): ...
    def on_Balances(self, balance: Any): ...
    def on_Explain(self, explain: Any): ...
    def on_RunCustom(self, run_stmt: Any) -> None: ...
    def help_targets(self) -> None: ...
    def help_from(self) -> None: ...
    def help_where(self) -> None: ...
    def help_attributes(self) -> None: ...

def generate_env_attribute_list(env: Any): ...
def generate_env_attributes(wrapper: Any, field_dict: Any, filter_pred: Optional[Any] = ...): ...
def summary_statistics(entries: Any): ...
def print_statistics(entries: Any, options_map: Any, outfile: Any) -> None: ...
def create_custom_query_map(entries: Any): ...
def main(): ...
