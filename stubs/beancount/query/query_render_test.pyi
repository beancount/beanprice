import unittest
from beancount.core import display_context as display_context, inventory as inventory, position as position
from beancount.core.amount import A as A
from beancount.core.number import D as D
from beancount.query import query_render as query_render
from typing import Any

class ColumnRendererBase(unittest.TestCase):
    RendererClass: Any = ...
    dcontext: Any = ...
    def get(self, *values: Any): ...

class TestStringRenderer(ColumnRendererBase):
    RendererClass: Any = ...
    def test_string_simple(self) -> None: ...
    def test_string_nones(self) -> None: ...
    def test_string_overflow(self) -> None: ...

class TestStringSetRenderer(ColumnRendererBase):
    RendererClass: Any = ...
    def test_string_set(self) -> None: ...

class TestDateTimeRenderer(ColumnRendererBase):
    RendererClass: Any = ...
    def test_simple(self) -> None: ...
    def test_nones(self) -> None: ...

class TestIntegerRenderer(ColumnRendererBase):
    RendererClass: Any = ...
    def test_integers(self) -> None: ...
    def test_integers_negative(self) -> None: ...
    def test_overflow(self) -> None: ...
    def test_zeros_only(self) -> None: ...

class TestDecimalRenderer(ColumnRendererBase):
    RendererClass: Any = ...
    def test_integer(self) -> None: ...
    def test_integers(self) -> None: ...
    def test_fractional(self) -> None: ...
    def test_mixed(self) -> None: ...
    def test_zero_integers(self) -> None: ...
    def test_nones(self) -> None: ...
    def test_virgin(self) -> None: ...

class TestAmountRenderer(ColumnRendererBase):
    RendererClass: Any = ...
    def setUp(self) -> None: ...
    def test_single_frac(self) -> None: ...
    def test_single_int(self) -> None: ...
    def test_many(self) -> None: ...

class TestPositionRenderer(ColumnRendererBase):
    RendererClass: Any = ...
    def test_various(self) -> None: ...

class TestInventoryRenderer(ColumnRendererBase):
    RendererClass: Any = ...
    def test_various(self) -> None: ...

class TestQueryRender(unittest.TestCase):
    def assertMultiLineEqualNoWS(self, expected: Any, actual: Any) -> None: ...
    dcontext: Any = ...
    def setUp(self) -> None: ...
    def test_render_str(self) -> None: ...
    def test_render_Decimal(self) -> None: ...
