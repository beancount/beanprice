from beancount.core import amount as amount, distribution as distribution, inventory as inventory, position as position
from typing import Any, Optional

class ColumnRenderer:
    dtype: Any = ...
    def __init__(self, unused_dcontext: Any) -> None: ...
    def update(self, value: Any) -> None: ...
    def prepare(self) -> None: ...
    def width(self) -> None: ...
    def format(self, value: Any) -> None: ...

class ObjectRenderer(ColumnRenderer):
    dtype: Any = ...
    maxlen: int = ...
    def __init__(self, dcontext: Any) -> None: ...
    def update(self, string: Any) -> None: ...
    def prepare(self) -> None: ...
    def width(self): ...
    def format(self, string: Any): ...

class BoolRenderer(ColumnRenderer):
    dtype: Any = ...
    maxlen: int = ...
    seen_true: bool = ...
    def __init__(self, dcontext: Any) -> None: ...
    def update(self, value: Any) -> None: ...
    fmt: Any = ...
    def prepare(self) -> None: ...
    def width(self): ...
    def format(self, value: Any): ...

class StringRenderer(ColumnRenderer):
    dtype: Any = ...
    maxlen: int = ...
    def __init__(self, dcontext: Any) -> None: ...
    def update(self, string: Any) -> None: ...
    fmt: Any = ...
    def prepare(self) -> None: ...
    def width(self): ...
    def format(self, string: Any): ...

class StringSetRenderer(ColumnRenderer):
    dtype: Any = ...
    maxlen: int = ...
    def __init__(self, dcontext: Any) -> None: ...
    def update(self, string_set: Any) -> None: ...
    fmt: Any = ...
    empty: Any = ...
    def prepare(self) -> None: ...
    def width(self): ...
    def format(self, string_set: Any): ...

class DateTimeRenderer(ColumnRenderer):
    dtype: Any = ...
    empty: Any = ...
    def __init__(self, dcontext: Any) -> None: ...
    def update(self, _: Any) -> None: ...
    def width(self): ...
    def format(self, dtime: Any): ...

class IntegerRenderer(ColumnRenderer):
    dtype: Any = ...
    has_negative: bool = ...
    max_digits: int = ...
    def __init__(self, dcontext: Any) -> None: ...
    def update(self, number: Any) -> None: ...
    max_width: Any = ...
    fmt: Any = ...
    def prepare(self) -> None: ...
    def width(self): ...
    def format(self, number: Any): ...

class DecimalRenderer(ColumnRenderer):
    dtype: Any = ...
    dcontext: Any = ...
    has_negative: bool = ...
    max_adjusted: int = ...
    min_exponent: int = ...
    total_width: Any = ...
    num_values: int = ...
    dists: Any = ...
    def __init__(self, dcontext: Any) -> None: ...
    def update(self, number: Any, key: Optional[Any] = ...) -> None: ...
    integral_width: Any = ...
    format_number: Any = ...
    fmt: Any = ...
    empty: Any = ...
    def prepare(self) -> None: ...
    def width(self): ...
    def format(self, number: Any, key: Optional[Any] = ...): ...

class AmountRenderer(ColumnRenderer):
    dtype: Any = ...
    rdr: Any = ...
    ccylen: int = ...
    def __init__(self, dcontext: Any) -> None: ...
    def update(self, amount_: Any) -> None: ...
    fmt: Any = ...
    empty: str = ...
    def prepare(self) -> None: ...
    def width(self): ...
    def format(self, amount_: Any): ...

class PositionRenderer(ColumnRenderer):
    dtype: Any = ...
    units_rdr: Any = ...
    cost_rdr: Any = ...
    def __init__(self, dcontext: Any) -> None: ...
    def update(self, pos: Any) -> None: ...
    fmt_with_cost: Any = ...
    fmt_without_cost: Any = ...
    total_width: Any = ...
    empty: Any = ...
    def prepare(self) -> None: ...
    def width(self): ...
    def format(self, pos: Any): ...

class InventoryRenderer(PositionRenderer):
    dtype: Any = ...
    def update(self, inv: Any) -> None: ...
    def format(self, inv: Any): ...

def get_renderers(result_types: Any, result_rows: Any, dcontext: Any): ...
def render_rows(result_types: Any, result_rows: Any, dcontext: Any, expand: bool = ..., spaced: bool = ...): ...
def render_text(result_types: Any, result_rows: Any, dcontext: Any, file: Any, expand: bool = ..., boxed: bool = ..., spaced: bool = ...) -> None: ...
def render_csv(result_types: Any, result_rows: Any, dcontext: Any, file: Any, expand: bool = ...) -> None: ...

RENDERERS: Any
