import unittest
from beancount import loader as loader
from beancount.core import inventory as inventory
from beancount.core.number import D as D
from beancount.parser import cmptest as cmptest
from beancount.query import query_parser as query_parser
from beancount.utils import misc_utils as misc_utils
from typing import Any

class QueryBase(cmptest.TestCase):
    maxDiff: int = ...
    xcontext_entries: Any = ...
    xcontext_targets: Any = ...
    xcontext_postings: Any = ...
    parser: Any = ...
    def setUp(self) -> None: ...
    def parse(self, bql_string: Any): ...
    def compile(self, bql_string: Any): ...
    def check_query(self, input_string: Any, bql_string: Any, expected_types: Any, expected_rows: Any, sort_rows: bool = ..., debug: bool = ...) -> None: ...
    def check_sorted_query(self, input_string: Any, bql_string: Any, expected_types: Any, expected_rows: Any): ...

class CommonInputBase:
    INPUT: Any = ...
    context: Any = ...
    def setUp(self) -> None: ...

class TestFilterEntries(CommonInputBase, QueryBase):
    def test_filter_empty_from(self) -> None: ...
    def test_filter_by_year(self) -> None: ...
    def test_filter_by_expr1(self) -> None: ...
    def test_filter_by_expr2(self) -> None: ...
    def test_filter_close_undated(self) -> None: ...
    def test_filter_close_dated(self) -> None: ...
    def test_filter_open_dated(self) -> None: ...
    def test_filter_clear(self) -> None: ...

class TestExecutePrint(CommonInputBase, QueryBase):
    def test_print_with_filter(self) -> None: ...
    def test_print_with_no_filter(self) -> None: ...

class TestAllocation(unittest.TestCase):
    def test_allocator(self) -> None: ...

class TestBalanceColumn(unittest.TestCase):
    def test_uses_balance_column(self) -> None: ...

class TestExecuteNonAggregatedQuery(QueryBase):
    INPUT: str = ...
    def test_non_aggregate__one(self) -> None: ...
    def test_non_aggregate__many(self) -> None: ...
    def test_non_aggregated_order_by_visible(self) -> None: ...
    def test_non_aggregated_order_by_invisible(self) -> None: ...
    def test_non_aggregated_order_by_none_date(self) -> None: ...
    def test_non_aggregated_order_by_none_str(self) -> None: ...

class TestExecuteAggregatedQuery(QueryBase):
    INPUT: str = ...
    def test_aggregated_group_by_all_implicit(self) -> None: ...
    def test_aggregated_group_by_all_explicit(self) -> None: ...
    def test_aggregated_group_by_visible(self) -> None: ...
    def test_aggregated_group_by_invisible(self) -> None: ...
    def test_aggregated_group_by_visible_order_by_non_aggregate_visible(self) -> None: ...
    def test_aggregated_group_by_visible_order_by_non_aggregate_invisible(self) -> None: ...
    def test_aggregated_group_by_visible_order_by_aggregate_visible(self) -> None: ...
    def test_aggregated_group_by_visible_order_by_aggregate_invisible(self) -> None: ...
    def test_aggregated_group_by_invisible_order_by_non_aggregate_visible(self) -> None: ...
    def test_aggregated_group_by_invisible_order_by_non_aggregate_invis(self) -> None: ...
    def test_aggregated_group_by_invisible_order_by_aggregate_visible(self) -> None: ...
    def test_aggregated_group_by_invisible_order_by_aggregate_invisible(self) -> None: ...

class TestExecuteOptions(QueryBase):
    INPUT: str = ...
    def test_order_by_asc_implicit(self) -> None: ...
    def test_order_by_asc_explicit(self) -> None: ...
    def test_order_by_desc(self) -> None: ...
    def test_distinct(self) -> None: ...
    def test_limit(self) -> None: ...

class TestArithmeticFunctions(QueryBase):
    def test_add(self) -> None: ...
    def test_sub(self) -> None: ...
    def test_mul(self) -> None: ...
    def test_div(self) -> None: ...
    def test_safe_div(self) -> None: ...
    def test_safe_div_zerobyzero(self) -> None: ...

class TestExecuteFlatten(QueryBase):
    def test_flatten_results(self) -> None: ...
    INPUT: str = ...
